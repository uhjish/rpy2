
Release 2.3.0-dev
=================

New Features
------------

:mod:`rpy2.rinterface`:

- C-level API, allowing other C-level modules to make use of utilities
  without going through the Python level. The exact definition of
  the API is not yet fixed. For now there is 
  PyRinteractive_IsInitialized() to assess whether R was initialized
  (through :mod:`rpy2.rinterface` or not).

Changes
-------

:mod:`rpy2.rinterface`:

- :attr:`SexpClosure.env` to replace the method `closureenv`.

Release 2.2.3
=============

Bugs fixed
----------

- Dynamic construction of S4 classes was looking for R help as 'class.<class>'
  rather than '<class>-class'

Release 2.2.2
=============

Bugs fixed
----------

- With the robjects layer, repr() on a list containing non-vector elements
  was failing

Release 2.2.1
=============

Bugs fixed
----------

- MANIFEST.in was missing from MANIFEST.in, required with Python 3


Release 2.2.0
=============

New Features
------------

- Support for Python 3, and for some of its features ported to Python 2.7

:mod:`rpy2.robjects`:

- :meth:`Environment.keys` to list the keys

- classes :class:`robjects.vectors.POSIXlt` and 
  :class:`robjects.vectors.POSIXlt` to represent vectors of R
  dates/time

- :func:`packages.get_packagepath` to get the path to an R package

- module :mod:`rpy2.robjects.help` to expose the R help system to Python

- Metaclass utilities in :mod:`rpy2.robjects.methods`, allowing to reflect
  automatically R S4 classes as Python classes.

- :meth:`rpy2.robjects.vectors.FactorVector.iter_labels` to iterate over the labels

- :class:`rpy2.robjects.vectors.ListVector` to represent R lists.

- Constructor for :class:`rpy2.robjects.vectors.ListVector` and 
  :class:`rpy2.robjects.vectors.DataFrame` accept any iterable at the condition
  that the elements iterated through also valid subscripts for it (e.g., given
  an iterable v, the following is valid:

  .. code-block:: python

     x[k] for x in v


:mod:`rpy2.rinterface`:

- :data:`NA_Complex` and :class:`NAComplexType` for missing complex values.

- :class:`SexpExtPtr` to represent R objects of type EXTPTR (external pointers).

- :func:`rpy2.rinterface.parse` to parse a string a R code

- :func:`rpy2.rinterface.rternalise` to wrap Python function as :class:`SexpClosure` that can
  be called by R just as it was a function of its own.

- :class:`rpy2.rinterface.RNULLType` for R's C-level NULL value and 
  :class:`rpy2.rinterface.UnboundValueType` for R's C-level R_UnboundValue
  (both singletons).

- :meth:`rinterface.SexpVector.index`, of similar behaviour to :meth:`list.index`.

- :meth:`rpy2.rinterface.Sexp.list_attrs` to list the names of all R attributes
  for a given object.

- :class:`rpy2.rinterface.ByteSexpVector` to represent R 'raw' vectors.

- constant `R_LEN_T_MAX` to store what is the maximum length for a vector in R.

- tuple `R_VERSION_BUILD` to store the version of R rpy2 was built against

- getter :attr:`Sexp.rclass` to return the R class associated with an object 

:mod:`rpy2.rlike`:

- :class:`container.OrdDict` get proper methods :meth:`keys` and `get`

:mod:`rpy2.interactive`:

- A new sub-package to provide utilities for interactive work, either for
  handling R interactive events or use Python for interactive programming
  (as often done with the R console)

Changes
-------

:mod:`rpy2.robjects`:

- NA_bool, NA_real, NA_integer, NA_character and NA_complex are now
  deprecated (and removed).
  NA_Logical, NA_Real, NA_Integer, NA_Character, NA_Complex should be used.

- :class:`rpy2.robjects.packages.Package` now inherits from :class:`types.ModuleType`

- classes representing R vector also inherit their type-specific
  rinterface-level counterpart.

- Importing the :class:`rpy2.robjects.numpy2ri` is no longer sufficient
  to active the conversion. Explicit activation is now needed; the function
  `activate` can do that.


:mod:`rpy2.rinterface`:

- :class:`IntSexpVector`, :class:`FloatSexpVector`,
  :class:`StrSexpVector`, :class:`BoolSexpVector`, :class:`ComplexSexpVector`
  are now defined at the C level, improving performances
  and memory footprint whenever a lot of instances are created.

Bugs fixed
----------

- Better and more explicit detection system for needed libraries when
  compiling rpy2 (ported to release 2.1.6)

- Long-standing issue with readline fixed (issue #10)


Release 2.1.9
=============

Bugs fixed
----------

- The R class in rpy2.robjects is now truly a singleton

- When using numpy 1.5 and Python >= 2.7, the exposed buffer for R numerical (double)
  vectors or arrays was wrong.


Release 2.1.8
=============

Bugs fixed
----------

- Fixed issue with R arrays with more than 2 dimensions and numpy arrays
  (issue #47 - backported from the branch 2.2.x).


Release 2.1.7
=============

Bugs fixed
----------

- More fixes for the automated detection of include and libraries at build time.


Release 2.1.6
=============

Bugs fixed
----------

- Further fixes in the automatic detection of includes and libraries
  needed to compile rpy2 against R. The detection code has
  been refactored (backport from the 2.2.x branch)


Release 2.1.5
=============

Bugs fixed
----------

- fixes the automatic detection of R_HOME/lib during building/compiling
  when R_HOME/lib is not in lib/ (issue #54)


Release 2.1.4
=============

New features
------------

- :mod:`rpy2.robjects.lib.ggplot2` now has the functions :func:`limits`,
  :func:`xlim`, :func:`ylim` exposed (patch contributed anonymously)

Bugs fixed
----------

- Install script when the BLAS library used by R is specified as a library
  file (patch by Michael Kuhn)


Release 2.1.3
=============

Bugs fixed
----------

- Spurious error message when using DataFrame.from_csvfile() without
  specifying col_names  or row_names

- Patch to finally compile with Python < 2.6 (contribDuted by Denis Barbier)


Release 2.1.2
=============

New Features
------------

:mod:`rpy2.robjects`:

- NA_Logical, NA_Real, NA_Integer, NA_Character from :mod:`rpy2.rinterface` 
  are imported by robjects.

Changes
-------

:mod:`rpy2.robjects`:

- NA_bool, NA_real, NA_integer, NA_character and NA_complex are now
  robjects-level vectors
  (they were rinterface-level vectors).
  Consider using the rinterface-defined NAs instead of them.

Bugs fixed
----------

- Missing conditional C definition to compile with Python 2.4 # issue 38

- Fixed error when calling robjects.vectors.Vector.iteritems() on an R 
  vector without names

- Fixed automatic conversion issues (issue #41)


Release 2.1.1
=============

Bugs fixed
----------

- Issues with NA values # issue 37

- Missing manual scale functions in :mod:`rpy2.robjects.lib.ggplot2` # issue 39


Release 2.1.0
=============

New Features
------------

:mod:`rpy2.robjects`:

- Method :meth:`formals` for :class:`Function` (formerly *RFunction*)

- Methods :meth:`slotnames`, :meth:`isclass`, and :meth:`validobject`
  for :class:`RS4`

- Vector-like objects now in a module :mod:`rpy2.robjects.vectors`

- :func:`set_accessors` for adding simply accessors to a class inheriting
  from :class:`RS4`

- :class:`RS4_Type` for metaclass-declared accessors

- Delegating classes :class:`ExtractDelegator` and 
  :class:`DoubleExtractDelegator` for extracting the R-way

- :class:`DataFrame` (formerly *RDataFrame*) can now be created 
  from :`rlike.container.OrdDict`
  instances, or any other object inheriting from dict.

- :class:`FactorVector` to represent R factors

- the conversion is now returning subclasses of
  :class:`robjects.vectors.Vector` -formerly *RVector*-
  (such as :class:`IntVector`, 
  :class:`FloatVector`, etc...) rather than only return :class:`Vector`

- :class:`StrVector` has a method :meth:`factor` to turn a
  vector of strings into an R factor

- :class:`Matrix` was added the methods: :meth:`dot`, :meth:`svd`, :meth:`crossprod`,
  :meth:`tcrossprod`, :meth:`transpose`.
 
- :meth:`IntVector.tabulate` to count the number of times a value is found in the vector

- :meth:`Vector.sample` to draw a (random) sample of arbitrary size from a vector

- :data:`NA_Bool`, :data:`NA_Real`, :data:`NA_Integer`, :data:`NA_Character`, 
  :data:`NA_Complex` as aliases for R's missing values.

- :data:`ComplexVector` for vectors of complex (real + imaginary) elements

- :mod:`packages` to provide utility functions to handle R packages
  (import of R packages)

- :mod:`functions` to provide classes related to R functions, with the new 
  class :class:`SignatureTranslatedFunction`

- :meth:`DataFrame.iter_row` and :meth:`DataFrame.iter_column`, iterating
  through rows and columns respectively.

- :meth:`DataFrame.cbind` and :meth:`DataFrame.rbind` for binding columns or
  rows to a DataFrame.

- :meth:`Vector.iteritems` to iterate on pairs of names and values.

- :attr:`Robject.__rname__` to store the "R name"

:mod:`rpy2.rinterface`:

- New functions for specifying callback functions for R's front-ends:
  :func:`set_showmessage`, :func:`set_flushconsole`,
  :func:`set_choosefile`, :func:`set_showfiles`

- New object :data:`MissingArg`, exposing R's special object for representing
  a "missing" parameter in a function call.
  (#this was first a patch by Nathaniel Smith with a function getMissingArgSexp)

- Initial commit of a callback-based implementation of an R graphical device
  (this is for the moment very experimental - and not fully working)

- :meth:`SexpClosure.rcall` is now taking 2 parameters, 
  a tuple with the parameters and
  an :class:`SexpEnvironment` in which the call is to be evaluated.

- :attr:`Sexp.__sexp__` now has a setter method. This permits the rebinding
  of the underlying R SEXP, and allows to expose `foo<-` type of R methods
  as Python function/methods with side effects.

- Objects of R type RAWSXP are now exposed as instances of class
  :class:`SexpVector`.

- Factory function :func:`unserialize` to build Sexp* instances from byte
  string serialized with R's own 'serialize'.

- Method :meth:`Sexp.__reduce__` for pickling/unpickling

- Ability to specify a callback function for R_CleanUp (called upon exiting R)
  through :func:`get_cleanup` and :func:`set_cleanup` [very experimental]

- Class :class:`ListSexpVector` for creating R lists easily
  (complementing :class:`IntSexpVector`, :class:`StrSexpVector`, and friends) 

- :meth:`colnames`, :meth:`rownames` for :class:`Array` (formerly *RArray*) are now 
  property-style getters

- Pairlists (LISTSXP) now handled

- Experimental function :func:`set_interactive` to set whether R is in interactive
  mode or not (#following an issue reported by Yaroslav Halchenko)

- New object :data:`R_NilValue`, exposing R's special object for representing
  a "NULL".

- :data:`ComplexSexpVector` for vectors of complex (real + imaginary) elements

- Scalar Python parameters of type :class:`int`, :class:`long`,
  :class:`double`, :class:`bool`, and :class:`None` 
  in a call (using :class:`SexpClosure`) are now automatically converted
  to length-one R vectors (at the exception of None, converted
  to R_NilValue).

- Python slices can now be used on R vector-like objects 

- Better handling of R's missing values NA, `NA_integer_`, `NA_real_`, 
  and `NA_character_`.

:mod:`rpy2.rlike`:

- :meth:`iteritems` for :class:`OrdDict` (formerly:class:`ArgDict`) 
  and :class:`TaggedList`

- static method :meth:`from_iteritems` for :class:`TaggedList`,
  for creating a TaggedList from any object having a method :meth:`iteritems`


Changes
-------

- The setup.py script is now taking command-line arguments when specifying
  R library-related paths are wished. python setup.py --help build_ext will
  list them
  
:mod:`rpy2.robjects`:

- RS4 no longer makes R's slots as Python attributes through :meth:`__attr__`

- The package is split into modules

- The broken variables NA_STRING, NA_INTEGER, NA_LOGICAL, and NA_REAL are
  removed. The documentation on missing values was revised.

- :data:`globalEnv` and :data:`baseNameSpaceEnv` were renamed to 
  :data:`globalenv` and :data:`baseenv` respectively

- The parameter *wantFun* in :meth:`Environment.get` 
  (formerly *REnvironment.get()*) is now *wantfun* 

- :attr:`Vector.r` does not have a __getitem__ method any longer
  (see in `.rx` and `.rx2` in the new features)

- :meth:`colnames`, :meth:`rownames`, :meth:`nrow`, :meth:`ncol` 
  for :class:`DataFrame` are now property-style getters

- :meth:`nrow`, :meth:`ncol` for :class:`Array` 
  are now property-style getters

- static method :meth:`from_csvfile` and 
  instance method :meth:`to_csvfile` for :class:`DataFrame`

- module :mod:`lib` to store modules representing R packages

- module :mod:`lib.ggplot2` for the CRAN package ggplot2.

- renaming of few classes, the *R* prefix: :class:`Formula` (from *RFormula*),
  :class:`DataFrame` (from *RDataFrame*), :class:`Array` (from *RArray*),
  :class:`Matrix` (from *RMatrix*), :class:`Environment` (from *REnvironment*),
  :class:`Function` (from *RFunction*), :class:`Vector` (from *RVector*).

- :class:`robjects.vectors.Vector` lost the (now redundant) methods
  `subset` and `assign`. Those operations were just aliases to the 
  :class:`ExtractDelegator`

:mod:`rpy2.rinterface`:

- :data:`globalEnv`, :data:`baseNameSpaceEnv`, and :data:`emptyEnv` 
  were renamed to :data:`globalenv`, :data:`baseenv` and :data:`emptyenv`
  respectively

- The parameter *wantFun* in :meth:`SexpEnvironment.get` is now *wantfun* 

- The call-back getters and setters are now :func:`get_readconsole`,
  :func:`set_readconsole`, :func:`get_writeconsole`, :func:`set_writeconsole`,
  :func:`get_flushconsole`, and :func:`set_flushconsole`.

- Functions also accept named parameters equal to Py_None, and transform them to R
  NULL (previously only accepted parameters inheriting from Sexp).

:mod:`rpy2.rlike`:

- :class:`ArgDict` becomes :class:`OrdDict`.

- :meth:`tags` of :class:`TaggedList` is now a property (with a getter
  and a setter)

:mod:`rpy2.rpy_classic`:

- R named lists are returned as Python :class:`dict`, like rpy-1.x does it, with the
  notable difference that duplicate names are not silently overwritten: an exception
  of class :class:`ValueError` is thrown whenever happening


Bugs fixed
----------

- :meth:`REnvironment.get` now accepts a named parameter *wantFun*
  (like :meth:`rinterface.SexpEnvironment` does)

- :class:`rinterface.SexpVector` will now properly raise an exception
  when trying to create vector-like object of impossible type

- Crash when trying to create a SexpVector of a non-vector type

- R objects of class *matrix* are now properly converted into :class:`RMatrix`
  (instead of :class:`Array`)

- :meth:`Robj.as_py` was not working at all (and now it does to some extent)


Release 2.0.7
=============

Bugs fixed
----------

- On win32, printing an object was leaving an open file handle behind each time,
  leading to an error and the impossibility to print
  (# bug report and fix by Christopher Gutierrez)


Release 2.0.6
=============

No user-visible change. Win32-specific additions to the C module
were made to compile it.


Release 2.0.5
=============

Bugs fixed
----------

- Crash when calling :meth:`SexpEnvironment.get` with an empty string
  #bug report by Walter Moreira

- :meth:`SexpEnvironment.__getitem__` called with an empty string
  caused unpredictable (and bad) things


Release 2.0.4
=============

Bugs fixed
----------

- Added missing named parameter *wantfun* to method :meth:`REnvironment.get`
  (making it similar to :meth:`SexpEnvironment.get`)

- Leak in reference counting when creating SexpVector objects fixed
  (the symptom was a process growing in size when creating R vector from
  Python list or numpy arrays)

- `R CMD config LAPACK_LIBS` could return an empty string when R was compiled
  with the veclib framework, causing the setup.py script to raise an exception.
  setup.py now only print a message about an empty string returned from 
  R CMD config

- Numpy arrays with complex elements are no longer causing segfaults

- Calls to :meth:`SexpClosure.rcall` with something else that the expected
  kind of tuple could cause a segfault


Release 2.0.3
=============

New Features
------------

:mod:`rpy2.rinterface`:

- :meth:`process_revents`, a Wrapper for R_ProcessEvents 
  (# suggested by June Kim to help with issues related to interactive display on win32),
  and for R_RunHandlers on UNIX-like systems 
  (# patch by Nathaniel Smith).

- All callbacks are getting a get<callback> to complement the set<callback>.
  (# Patch by Nathaniel Smith) 

- :meth:`Sexp.__deepcopy__` to copy an object (calling Rf_Duplicate) 
   (# from a patch by Nathaniel Smith)
 
Changes
-------
 
- the default for reading and writing the console are now using sys.stdin and sys.stdout 
  (# patch submitted by Nathaniel Smith)
 
- console IO callbacks (reading and writing) are complemented by 
  one to flush the console

- :meth:`Sexp.do_slot_assign` now creates the slot if missing
  (design-fix - # patch by Nathaniel Smith)
 

Bugs fixed
----------
 
- fixed problem of numpy interface with R boolean vectors. 
  They are now presented as 'i' rather than 'b' to numpy
  (# patch submitted by Nathaniel Smith)
 
- The mechanism for setting arbitrary callaback functions for console I/O 
  now ensures that a traceback is printed to stderr whenever an error
  occurs during the evalutation of the callback (the raised exception used
  to be silently propagated to the next python call, leading to problems).



Release 2.0.2
=============

Bugs fixed
----------

- Fix installation bug when the include directories contain either '-' or 'I'
  #spotted by James Yoo

- Failing to initialize R now throws a RuntimeError

- Copying an R "NA" into Python returns a None (and no longer a True)
  (#fixes a bug reported by Jeff Gentry)


Release 2.0.1
=============

New features
------------

:mod:`rpy2.robjects`:

- Property `names` for the :class:`RVector` methods :meth:`getnames` 
  and :meth:`setnames` (this was likely forgotten for Release 2.0.0).

- Property `rclass` for :class:`RObjectMixin` 

Changes
-------

:mod:`rpy2.robjects`:

- :meth:`rclass` becomes :meth:`getrclass`

Bugs fixed
----------

- Having the environment variable R_HOME specified resulted in an error
  when importing :mod:`rpy2.rinterface` # root of the problem spotted by Peter

- Setup.py has no longer a (possibly outdated) static hardcoded version number
  for rpy2

- Testing no longer stops with an error in the absence of the third-party
  module :mod:`numpy`

- :meth:`rpy2.rlike.container.TaggedList.pop` is now returning the element
  matching the given index



Release 2.0.0
=============

New features
------------

- New module :mod:`rpy2.robjects.conversion`.

- New module :mod:`rpy2.robjects.numpy2ri` to convert :mod:`numpy` objects
  into :mod:`rpy2` objects. 
  # adapted from a patch contributed by Nathaniel Smith


Changes
-------

- :meth:`RObject.__repr__` moved to :meth:`RObject.r_repr`


Bugs fixed
----------

- Informative message returned as RuntimeError when failing to find R's HOME

- Use the registry to find the R's HOME on win32
  # snatched from Peter's earlier contribution to rpy-1.x


Release 2.0.0rc1
================

:mod:`rpy2.rpy_classic`:

- :meth:`rpy_classic.RObj.getSexp` moved to a 
  property :attr:`rpy_classic.Robj.sexp`.

:mod:`rpy2.robjects`:

- :meth:`RObject.__repr__` moved to :meth:`RObject.r_repr`

- :meth:`ri2py`, :meth:`ro2py`, and :meth:`py2ri` moved to the new module
  :mod:`conversion`. Adding the prefix `conversion.` to calls
  to those functions will be enough to update existing code


Bugs fixed
----------

- Informative message returned as RuntimeError when failing to find R's HOME

- Use the registry to find the R's HOME on win32
  # snatched from Peter's earlier contribution to rpy-1.x


Release 2.0.0rc1
================

New features
------------

- added :data:`__version__` to rpy2/__init__.py

:mod:`rpy2.robjects`:

- added classes :class:`StrVector`, :class:`IntVector`, :class:`FloatVector`, :class:`BoolVector`

:mod:`rpy2.rinterface`:

- added missing class :class:`BoolSexpVector`.


Changes
-------

:mod:`rpy2.robjects`:

- does not alias :class:`rinterface.StrSexpVector`, :class:`rinterface.IntSexpVector`, :class:`rinterface.FloatSexpVector` anymore

- Constructor for :class:`rpy2.robjects.RDataFrame` checks that R lists are data.frames (not all lists are data.frame)

- Formerly new attribute :attr:`_dotter` for :class:`R` is now gone. The documentaion now points to :mod:`rpy2.rpy_classic` for this sort of things.

Bugs fixed
----------

- conditional typedef in rinterface.c to compile under win32 # reported and initial proposed fix from Paul Harrington

- __pow__ was missing from the delegator object for robjects.RVector (while the documentation was claiming it was there) # bug report by Robert Nuske

- Earlier change from Sexp.typeof() to getter Sexp.typeof was not reflected in :mod:`rpy2.rpy_classic` # bug report by Robert Denham

 
Release 2.0.0b1
===============

New features
------------

:mod:`rpy2.robjects`:

- added :meth:`setenvironment` for :class:`RFormula`, and defined `environment` as a property

- defined `names` as a property for :class:`RVector`

:mod:`rpy2.rinterface`:

- added functions :func:`get_initoptions` and :func:`set_initoptions`.

- new attribute :attr:`_dotter` for :class:`R` singleton. Setting it to True will translate '_' into '.' if the attribute is not found 

Changes
-------

:mod:`rpy2.robjects`:

- constructor for RDataFrame now now accepts either :class:`rlike.container.TaggedList` or :class:`rinterface.SexpVector`

:mod:`rpy2.rinterface`:

- :func:`sexpTypeEmbeddedR` is now called :func:`str_typeint`.

- :attr:`initOptions` is now called :attr:`initoptions`. Changes of options can only be done through :func:`set_initoptions`.


Bugs fixed
----------

- crash of :meth:`Sexp.enclos` when R not yet initialized (bug report #2078176)

- potential crash of :meth:`Sexp.frame` when R not yet initialized

- proper reference counting when handling, and deleting, :attr:`Sexp.__sexp__` generated CObjects

- setup.py: get properly the include directories (no matter where they are) #bug report and fix adapted from Robert Nuske

- setup.py: link to external lapack or blas library when relevant

- added a MANIFEST.in ensuring that headers get included in the source distribution #missing headers reported by Nicholas Lewin-Koh

- :func:`rinterface.str_typeint` was causing segfault when called with 99

- fixed subsetting for LANGSXP objects


Release 2.0.0a3
===============

New features
------------

:mod:`rpy2.rinterface`:

- :func:`setReadConsole`: specify Python callback for console input

- `R` string vectors can now be built from Python unicode objects

- getter :attr:`__sexp__` to return an opaque C pointer to the underlying R object

- method :meth:`rsame` to test if the underlying R objects for two :class:`Sexp` are the same.

- added `emptyEnv` (R's C-level `R_EmptyEnv`)

- added method :meth:`Sexp.do_slot_assign`

:mod:`rpy2.robjects`:

- R string vectors can now be built from Python unicode objects

:mod:`rpy2.rlike`:

- module :mod:`functional` with the functions :func:`tapply`, :func:`listify`, :func:`iterify`.

- module :mod:`indexing` with the function :func:`order`

- method :meth:`TaggedList.sort` now implemented

 
Changes
-------

:mod:`rpy2.rinterface`:

- :func:`initEmbeddedR` is only initializing if R is not started (no effect otherwise, and no exception thrown anymore)

- the method :meth:`Sexp.typeof` was replaced by a Python `getter` :attr:`typeof`.

- the method :meth:`Sexp.named` was replaced by a Python `getter` :attr:`named`.

- R objects of type LANGSXP are now one kind of vector (... but this may change again)

- R objects of type EXPRSXP are now handled as vectors (... but this may change again)

- :func:`initEmbeddedR` renamed to :func:`initr`

- :func:`endEmbeddedR` renamed to :func:`endr`


:mod:`rpy2.robjects`:

- :class:`R` remains a singleton, but does not throw an exception when multiple instances are requested


Bugs fixed
----------

- unable to compile on Python2.4 (definition of aliases to Python2.5-specific were not where they should be).

- overflow issues on Python 2.4/64 bits when indexing R vector with very large integers.

- handling of negative indexes for :class:`SexpVector`'s :meth:`__getitem__` and :meth:`__setitem__` was missing

- trying to create an instance of :class:`SexpVector` before initializing R raises a RuntimeException (used to segfault)

- experimental method :meth:`enclos` was not properly exported

- setup.py was exiting prematurely when R was compiled against an existing BLAS library

- complex vectors should now be handled properly by :mod:`rpy2.rinterface.robjects`.

- methods :meth:`rownames` and :meth:`colnames` for :class:`RDataFrame` were incorrect.

Release 2.0.0a2
===============

New features
------------

:mod:`rpy2.rlike`:

- package for R-like features in Python

- module :mod:`rpy2.rlike.container` 

- class :class:`ArgsDict` in :mod:`rpy2.rlike.container`

- class :class:`TaggedList` in :mod:`rpy2.rlike.container`

:mod:`rpy2.rinterface`:

- method :meth:`named`, corresponding to R's C-level NAMED

- experimental methods :meth:`frame` and :meth:`enclos` for SexpEnvironment corresponding to R's C-level FRAME and ENCLOS

- method :meth:`rcall` for :class:`ClosureSexp`

- new experimental class :class:`SexpLang` for R language objects.


Bugs fixed
----------

- R stack checking is disabled (no longer crashes when multithreading)

- fixed missing R_PreserveObject for vectors (causing R part of the object to sometimes vanish during garbage collection)

- prevents calling an R function when R has been ended (raise :class:`RuntimeException`).


Release 2.0.0a1
===============

New features
------------

:mod:`rpy2.robjects`:

- method :meth:`getnames` for :class:`RVector`

- experimental methods :meth:`__setitem__` and :meth:`setnames` for :class:`RVector`

- method 'getnames' for :class:`RArray`

- new class :class:`RFormula`

- new helper class :class:`RVectorDelegator` (see below)

- indexing RVector the "R way" with subset is now possible through a delegating attribute (e.g., myvec.r[True] rather than myvec.subset(True)). #suggested by Michael Sorich

- new class :class:`RDataFrame`. The constructor :meth:`__init__` is still experimental (need for an ordered dictionnary, that will be in before the beta

- filled documentation about mapping between objects

Changes
-------

- many fixes and additions to the documentation

- improved GTK console in the demos

- changed the major version number to 2 in order to avoid confusion with rpy 1.x # Suggested by Peter and Gregory Warnes

- moved test.py to demos/example01.py

:mod:`rpy2.robjects`:

- changed method name `getNames` to `getnames` where available (all lower-case names for methods seems to be the accepted norm in Python).


Bugs fixed
----------

:mod:`rpy2.robjects`:

- fixed string representation of R object on Microsoft Windows (using fifo, not available on win32)

- :meth:`__getattr__` for :class:`RS4` is now using :meth:`ri2py` 

:mod:`rpy2.rinterface`:

- fixed context of evaluation for R functions (now R_GlobalEnv)

Release 1.0a0
=============

- first public release
